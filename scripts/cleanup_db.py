"""
Script pour nettoyer compl√®tement la base de donn√©es
‚ö†Ô∏è ATTENTION: Ce script supprime TOUTES les donn√©es!
"""
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent))

from sqlalchemy.orm import Session
from app.db.session import SessionLocal, engine
from app.db.base import Base
from app.models.attendance import Attendance
from app.models.leave import Leave
from app.models.device import Device
from app.models.employee import Employee
from app.models.department import Department
from app.models.site import Site
from app.models.role import Role, Permission
from app.models.user import User
from app.models.organization import Organization


def confirm_cleanup():
    """Demander confirmation avant de nettoyer"""
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es!")
    print("‚ö†Ô∏è  Cette action est IRR√âVERSIBLE!")
    response = input("\nTaper 'SUPPRIMER' pour confirmer: ")
    return response == "SUPPRIMER"


def cleanup_database(db: Session):
    """Nettoyer toutes les donn√©es"""
    print("\nüóëÔ∏è  Suppression des donn√©es...")
    
    try:
        # Supprimer dans l'ordre inverse des d√©pendances
        print("  ‚Ä¢ Suppression des cong√©s...")
        db.query(Leave).delete()
        
        print("  ‚Ä¢ Suppression des pointages...")
        db.query(Attendance).delete()
        
        print("  ‚Ä¢ Suppression des employ√©s...")
        db.query(Employee).delete()
        
        print("  ‚Ä¢ Suppression des d√©partements...")
        db.query(Department).delete()
        
        print("  ‚Ä¢ Suppression des dispositifs...")
        db.query(Device).delete()
        
        print("  ‚Ä¢ Suppression des utilisateurs...")
        db.query(User).delete()
        
        print("  ‚Ä¢ Suppression des r√¥les et permissions...")
        db.query(Role).delete()
        db.query(Permission).delete()
        
        print("  ‚Ä¢ Suppression des sites...")
        db.query(Site).delete()
        
        print("  ‚Ä¢ Suppression des organisations...")
        db.query(Organization).delete()
        
        db.commit()
        print("\n‚úÖ Base de donn√©es nettoy√©e avec succ√®s!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du nettoyage: {str(e)}")
        db.rollback()
        raise


def drop_all_tables():
    """Supprimer toutes les tables (option nucl√©aire)"""
    print("\nüí£ Suppression de TOUTES les tables...")
    Base.metadata.drop_all(bind=engine)
    print("‚úÖ Toutes les tables ont √©t√© supprim√©es!")
    
    print("\nüî® Recr√©ation des tables...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ Tables recr√©√©es!")


def main():
    """Fonction principale"""
    print("=" * 60)
    print("üóëÔ∏è  NETTOYAGE DE LA BASE DE DONN√âES KUILINGA")
    print("=" * 60)
    
    print("\nOptions:")
    print("  1. Nettoyer les donn√©es (garder les tables)")
    print("  2. Supprimer et recr√©er toutes les tables")
    print("  3. Annuler")
    
    choice = input("\nVotre choix (1/2/3): ")
    
    if choice == "1":
        if confirm_cleanup():
            db = SessionLocal()
            try:
                cleanup_database(db)
            finally:
                db.close()
        else:
            print("\n‚ùå Op√©ration annul√©e")
    
    elif choice == "2":
        if confirm_cleanup():
            drop_all_tables()
        else:
            print("\n‚ùå Op√©ration annul√©e")
    
    else:
        print("\n‚ùå Op√©ration annul√©e")


if __name__ == "__main__":
    main()